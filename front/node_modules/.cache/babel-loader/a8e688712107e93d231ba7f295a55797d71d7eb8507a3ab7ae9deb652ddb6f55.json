{"ast":null,"code":"var _jsxFileName = \"/goinfre/ihovhann/our_project/src/pages/Chat.tsx\",\n  _s = $RefreshSig$();\n// // function Chat() {\n// //     return (\n// //         <h1>Barev</h1>\n// //     );\n// // }\n\n// // export default Chat\n\n// import React, { useState } from 'react';\n// import './Chat.css';\n\n// interface Message {\n//   id: number;\n//   text: string;\n// }\n\n// const Chat: React.FC = () => {\n//   const [messages, setMessages] = useState<Message[]>([]);\n//   const [newMessage, setNewMessage] = useState('');\n\n//   const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setNewMessage(event.target.value);\n//   };\n\n//   const handleFormSubmit = (event: React.FormEvent) => {\n//     event.preventDefault();\n//     if (newMessage.trim() === '') {\n//       return;\n//     }\n//     const message: Message = {\n//       id: Date.now(),\n//       text: newMessage.trim(),\n//     };\n//     setMessages((prevMessages) => [...prevMessages, message]);\n//     setNewMessage('');\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-messages\">\n//         {messages.map((message) => (\n//           <div key={message.id} className=\"chat-message\">\n//             {message.text}\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleFormSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={handleInputChange}\n//           placeholder=\"Enter your message\"\n//           className=\"chat-input\"\n//         />\n//         <button type=\"submit\" className=\"chat-button\">\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './Chat.css';\n\n// interface ChatProps {\n//   messages: string[];\n// }\n\n// const Chat: React.FC<ChatProps> = ({ messages = [] }) => {\n//   const [inputValue, setInputValue] = useState('');\n//   const chatContainerRef = useRef<HTMLDivElement>(null);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setInputValue(event.target.value);\n//   };\n\n//   const handleFormSubmit = (event: React.FormEvent) => {\n//     event.preventDefault();\n//     if (inputValue.trim() !== '') {\n//       addMessage(inputValue);\n//       setInputValue('');\n//     }\n//   };\n\n//   const addMessage = (message: string) => {\n//     // Perform any necessary actions with the message, such as sending it to a server or updating the state in a parent component\n//     console.log('New message:', message);\n//   };\n\n//   const scrollToBottom = () => {\n//     if (chatContainerRef.current) {\n//       chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\" ref={chatContainerRef}>\n//       <div className=\"chat-messages\">\n//         {messages.map((message, index) => (\n//           <div key={index} className=\"chat-message\">\n//             {message}\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleFormSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={inputValue}\n//           onChange={handleInputChange}\n//           placeholder=\"Enter your message\"\n//           className=\"chat-input\"\n//         />\n//         <button type=\"submit\" className=\"chat-button\">\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n\n// };\n\n// export default Chat;\n\n// import React from 'react';\n// import './Chat.css';\n\n// interface ChatWindowProps {\n//   messages: string[];\n// }\n\n// const ChatWindow: React.FC<ChatWindowProps> = ({ messages }) => {\n//   return (\n//     <div className=\"chat-window\">\n//       {messages.map((message, index) => (\n//         <div key={index} className=\"chat-message\">\n//           {message}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default ChatWindow;\n\n// import React, { useState } from 'react';\n// import './Chat.css';\n\n// interface ChatProps {\n//   messages: string[];\n// }\n\n// const Chat: React.FC<ChatProps> = ({ messages }) => {\n//   const [newMessage, setNewMessage] = useState('');\n\n//   const handleSend = () => {\n//     if (newMessage.trim() !== '') {\n//       // Add the new message to the existing messages array\n//       const updatedMessages = [...messages, newMessage];\n//       // Clear the input field\n//       setNewMessage('');\n//       // Perform any action with the updated messages array (e.g., send to a server)\n//       console.log(updatedMessages);\n//     }\n//   };\n\n//   const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setNewMessage(event.target.value);\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-window\">\n//         {messages.map((message, index) => (\n//           <div key={index} className=\"chat-message\">\n//             {message}\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={newMessage}\n//           onChange={handleInputChange}\n//         />\n//         <button onClick={handleSend}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\nimport React, { useState } from 'react';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = _ref => {\n  _s();\n  let {\n    messages\n  } = _ref;\n  const [newMessage, setNewMessage] = useState('');\n  const [messageList, setMessageList] = useState(messages);\n  const handleSend = () => {\n    if (newMessage.trim() !== '') {\n      const updatedMessages = [...messageList, newMessage];\n      setMessageList(updatedMessages);\n      setNewMessage('');\n      console.log(updatedMessages);\n    }\n  };\n  const handleInputChange = event => {\n    setNewMessage(event.target.value);\n  };\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messageList.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-message\",\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: handleInputChange,\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"GYulHD4Va+SO8+1ppYRTy/vIx4w=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chat","_ref","_s","messages","newMessage","setNewMessage","messageList","setMessageList","handleSend","trim","updatedMessages","console","log","handleInputChange","event","target","value","handleKeyDown","key","preventDefault","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["/goinfre/ihovhann/our_project/src/pages/Chat.tsx"],"sourcesContent":["\n// // function Chat() {\n// //     return (\n// //         <h1>Barev</h1>\n// //     );\n// // }\n\n// // export default Chat\n\n// import React, { useState } from 'react';\n// import './Chat.css';\n\n// interface Message {\n//   id: number;\n//   text: string;\n// }\n\n// const Chat: React.FC = () => {\n//   const [messages, setMessages] = useState<Message[]>([]);\n//   const [newMessage, setNewMessage] = useState('');\n\n//   const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setNewMessage(event.target.value);\n//   };\n\n//   const handleFormSubmit = (event: React.FormEvent) => {\n//     event.preventDefault();\n//     if (newMessage.trim() === '') {\n//       return;\n//     }\n//     const message: Message = {\n//       id: Date.now(),\n//       text: newMessage.trim(),\n//     };\n//     setMessages((prevMessages) => [...prevMessages, message]);\n//     setNewMessage('');\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-messages\">\n//         {messages.map((message) => (\n//           <div key={message.id} className=\"chat-message\">\n//             {message.text}\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleFormSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={handleInputChange}\n//           placeholder=\"Enter your message\"\n//           className=\"chat-input\"\n//         />\n//         <button type=\"submit\" className=\"chat-button\">\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './Chat.css';\n\n// interface ChatProps {\n//   messages: string[];\n// }\n\n// const Chat: React.FC<ChatProps> = ({ messages = [] }) => {\n//   const [inputValue, setInputValue] = useState('');\n//   const chatContainerRef = useRef<HTMLDivElement>(null);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setInputValue(event.target.value);\n//   };\n\n//   const handleFormSubmit = (event: React.FormEvent) => {\n//     event.preventDefault();\n//     if (inputValue.trim() !== '') {\n//       addMessage(inputValue);\n//       setInputValue('');\n//     }\n//   };\n\n//   const addMessage = (message: string) => {\n//     // Perform any necessary actions with the message, such as sending it to a server or updating the state in a parent component\n//     console.log('New message:', message);\n//   };\n\n//   const scrollToBottom = () => {\n//     if (chatContainerRef.current) {\n//       chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\" ref={chatContainerRef}>\n//       <div className=\"chat-messages\">\n//         {messages.map((message, index) => (\n//           <div key={index} className=\"chat-message\">\n//             {message}\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleFormSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={inputValue}\n//           onChange={handleInputChange}\n//           placeholder=\"Enter your message\"\n//           className=\"chat-input\"\n//         />\n//         <button type=\"submit\" className=\"chat-button\">\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n\n// };\n\n// export default Chat;\n\n// import React from 'react';\n// import './Chat.css';\n\n// interface ChatWindowProps {\n//   messages: string[];\n// }\n\n// const ChatWindow: React.FC<ChatWindowProps> = ({ messages }) => {\n//   return (\n//     <div className=\"chat-window\">\n//       {messages.map((message, index) => (\n//         <div key={index} className=\"chat-message\">\n//           {message}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default ChatWindow;\n\n// import React, { useState } from 'react';\n// import './Chat.css';\n\n// interface ChatProps {\n//   messages: string[];\n// }\n\n// const Chat: React.FC<ChatProps> = ({ messages }) => {\n//   const [newMessage, setNewMessage] = useState('');\n\n//   const handleSend = () => {\n//     if (newMessage.trim() !== '') {\n//       // Add the new message to the existing messages array\n//       const updatedMessages = [...messages, newMessage];\n//       // Clear the input field\n//       setNewMessage('');\n//       // Perform any action with the updated messages array (e.g., send to a server)\n//       console.log(updatedMessages);\n//     }\n//   };\n\n//   const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setNewMessage(event.target.value);\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-window\">\n//         {messages.map((message, index) => (\n//           <div key={index} className=\"chat-message\">\n//             {message}\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Type your message...\"\n//           value={newMessage}\n//           onChange={handleInputChange}\n//         />\n//         <button onClick={handleSend}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\nimport React, { useState } from 'react';\nimport './Chat.css';\n\ninterface ChatProps {\n  messages: string[];\n}\n\nconst Chat: React.FC<ChatProps> = ({ messages }) => {\n  const [newMessage, setNewMessage] = useState('');\n  const [messageList, setMessageList] = useState(messages);\n\n  const handleSend = () => {\n    if (newMessage.trim() !== '') {\n      const updatedMessages = [...messageList, newMessage];\n      setMessageList(updatedMessages);\n      setNewMessage('');\n      console.log(updatedMessages);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-window\">\n        {messageList.map((message, index) => (\n          <div key={index} className=\"chat-message\">\n            {message}\n          </div>\n        ))}\n      </div>\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Type your message...\"\n          value={newMessage}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n        />\n        <button onClick={handleSend}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n\n\n\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMpB,MAAMC,IAAyB,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC7C,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAACM,QAAQ,CAAC;EAExD,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIJ,UAAU,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC5B,MAAMC,eAAe,GAAG,CAAC,GAAGJ,WAAW,EAAEF,UAAU,CAAC;MACpDG,cAAc,CAACG,eAAe,CAAC;MAC/BL,aAAa,CAAC,EAAE,CAAC;MACjBM,OAAO,CAACC,GAAG,CAACF,eAAe,CAAC;IAC9B;EACF,CAAC;EAED,MAAMG,iBAAiB,GAAIC,KAA0C,IAAK;IACxET,aAAa,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAMC,aAAa,GAAIH,KAA4C,IAAK;IACtE,IAAIA,KAAK,CAACI,GAAG,KAAK,OAAO,EAAE;MACzBJ,KAAK,CAACK,cAAc,CAAC,CAAC;MACtBX,UAAU,CAAC,CAAC;IACd;EACF,CAAC;EAED,oBACET,OAAA;IAAKqB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BtB,OAAA;MAAKqB,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzBf,WAAW,CAACgB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC9BzB,OAAA;QAAiBqB,SAAS,EAAC,cAAc;QAAAC,QAAA,EACtCE;MAAO,GADAC,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN7B,OAAA;MAAKqB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBtB,OAAA;QACE8B,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,sBAAsB;QAClCd,KAAK,EAAEZ,UAAW;QAClB2B,QAAQ,EAAElB,iBAAkB;QAC5BmB,SAAS,EAAEf;MAAc;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACF7B,OAAA;QAAQkC,OAAO,EAAEzB,UAAW;QAAAa,QAAA,EAAC;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA7CIF,IAAyB;AAAAkC,EAAA,GAAzBlC,IAAyB;AA+C/B,eAAeA,IAAI;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}