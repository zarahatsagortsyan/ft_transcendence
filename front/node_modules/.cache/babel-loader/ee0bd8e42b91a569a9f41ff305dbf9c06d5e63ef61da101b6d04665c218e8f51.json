{"ast":null,"code":"var _s = $RefreshSig$();\n// // function Chat() {\n// //     return (\n// //         <h1>Barev</h1>\n// //     );\n// // }\n\n// // export default Chat\n\n// import React, { useState } from 'react';\n// import './Chat.css';\n\n// interface Message {\n//   id: number;\n//   text: string;\n// }\n\n// const Chat: React.FC = () => {\n//   const [messages, setMessages] = useState<Message[]>([]);\n//   const [newMessage, setNewMessage] = useState('');\n\n//   const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setNewMessage(event.target.value);\n//   };\n\n//   const handleFormSubmit = (event: React.FormEvent) => {\n//     event.preventDefault();\n//     if (newMessage.trim() === '') {\n//       return;\n//     }\n//     const message: Message = {\n//       id: Date.now(),\n//       text: newMessage.trim(),\n//     };\n//     setMessages((prevMessages) => [...prevMessages, message]);\n//     setNewMessage('');\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-messages\">\n//         {messages.map((message) => (\n//           <div key={message.id} className=\"chat-message\">\n//             {message.text}\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleFormSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={handleInputChange}\n//           placeholder=\"Enter your message\"\n//           className=\"chat-input\"\n//         />\n//         <button type=\"submit\" className=\"chat-button\">\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\nimport { useState, useRef, useEffect } from 'react';\nimport './Chat.css';\nconst Chat = _ref => {\n  _s();\n  let {\n    messages = []\n  } = _ref;\n  const [inputValue, setInputValue] = useState('');\n  const chatContainerRef = useRef(null);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    if (inputValue.trim() !== '') {\n      addMessage(inputValue);\n      setInputValue('');\n    }\n  };\n  const addMessage = message => {\n    // Perform any necessary actions with the message, such as sending it to a server or updating the state in a parent component\n    console.log('New message:', message);\n  };\n  const scrollToBottom = () => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  };\n\n  //   return (\n  //     <div className=\"chat-container\" ref={chatContainerRef}>\n  //       <div className=\"chat-messages\">\n  //         {messages.map((message, index) => (\n  //           <div key={index} className=\"chat-message\">\n  //             {message}\n  //           </div>\n  //         ))}\n  //       </div>\n  //       <form onSubmit={handleFormSubmit} className=\"chat-form\">\n  //         <input\n  //           type=\"text\"\n  //           value={inputValue}\n  //           onChange={handleInputChange}\n  //           placeholder=\"Enter your message\"\n  //           className=\"chat-input\"\n  //         />\n  //         <button type=\"submit\" className=\"chat-button\">\n  //           Send\n  //         </button>\n  //       </form>\n  //     </div>\n  //   );\n};\n_s(Chat, \"grnEdxXuVqx2eNrWmPwGBJ2yFEM=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useRef","useEffect","Chat","_ref","_s","messages","inputValue","setInputValue","chatContainerRef","scrollToBottom","handleInputChange","event","target","value","handleFormSubmit","preventDefault","trim","addMessage","message","console","log","current","scrollTop","scrollHeight","_c","$RefreshReg$"],"sources":["/goinfre/ihovhann/our_project/src/pages/Chat.tsx"],"sourcesContent":["\n// // function Chat() {\n// //     return (\n// //         <h1>Barev</h1>\n// //     );\n// // }\n\n// // export default Chat\n\n// import React, { useState } from 'react';\n// import './Chat.css';\n\n// interface Message {\n//   id: number;\n//   text: string;\n// }\n\n// const Chat: React.FC = () => {\n//   const [messages, setMessages] = useState<Message[]>([]);\n//   const [newMessage, setNewMessage] = useState('');\n\n//   const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setNewMessage(event.target.value);\n//   };\n\n//   const handleFormSubmit = (event: React.FormEvent) => {\n//     event.preventDefault();\n//     if (newMessage.trim() === '') {\n//       return;\n//     }\n//     const message: Message = {\n//       id: Date.now(),\n//       text: newMessage.trim(),\n//     };\n//     setMessages((prevMessages) => [...prevMessages, message]);\n//     setNewMessage('');\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-messages\">\n//         {messages.map((message) => (\n//           <div key={message.id} className=\"chat-message\">\n//             {message.text}\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleFormSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={handleInputChange}\n//           placeholder=\"Enter your message\"\n//           className=\"chat-input\"\n//         />\n//         <button type=\"submit\" className=\"chat-button\">\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Chat.css';\n\ninterface ChatProps {\n  messages: string[];\n}\n\nconst Chat: React.FC<ChatProps> = ({ messages = [] }) => {\n  const [inputValue, setInputValue] = useState('');\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (inputValue.trim() !== '') {\n      addMessage(inputValue);\n      setInputValue('');\n    }\n  };\n\n  const addMessage = (message: string) => {\n    // Perform any necessary actions with the message, such as sending it to a server or updating the state in a parent component\n    console.log('New message:', message);\n  };\n\n  const scrollToBottom = () => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  };\n\n//   return (\n//     <div className=\"chat-container\" ref={chatContainerRef}>\n//       <div className=\"chat-messages\">\n//         {messages.map((message, index) => (\n//           <div key={index} className=\"chat-message\">\n//             {message}\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleFormSubmit} className=\"chat-form\">\n//         <input\n//           type=\"text\"\n//           value={inputValue}\n//           onChange={handleInputChange}\n//           placeholder=\"Enter your message\"\n//           className=\"chat-input\"\n//         />\n//         <button type=\"submit\" className=\"chat-button\">\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n\n};\n\nexport default Chat;\n\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAAgBA,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,YAAY;AAMnB,MAAMC,IAAyB,GAAGC,IAAA,IAAuB;EAAAC,EAAA;EAAA,IAAtB;IAAEC,QAAQ,GAAG;EAAG,CAAC,GAAAF,IAAA;EAClD,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMS,gBAAgB,GAAGR,MAAM,CAAiB,IAAI,CAAC;EAErDC,SAAS,CAAC,MAAM;IACdQ,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,MAAMK,iBAAiB,GAAIC,KAA0C,IAAK;IACxEJ,aAAa,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAMC,gBAAgB,GAAIH,KAAsB,IAAK;IACnDA,KAAK,CAACI,cAAc,CAAC,CAAC;IACtB,IAAIT,UAAU,CAACU,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC5BC,UAAU,CAACX,UAAU,CAAC;MACtBC,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;EAED,MAAMU,UAAU,GAAIC,OAAe,IAAK;IACtC;IACAC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,OAAO,CAAC;EACtC,CAAC;EAED,MAAMT,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAID,gBAAgB,CAACa,OAAO,EAAE;MAC5Bb,gBAAgB,CAACa,OAAO,CAACC,SAAS,GAAGd,gBAAgB,CAACa,OAAO,CAACE,YAAY;IAC5E;EACF,CAAC;;EAEH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAEA,CAAC;AAACnB,EAAA,CAvDIF,IAAyB;AAAAsB,EAAA,GAAzBtB,IAAyB;AAyD/B,eAAeA,IAAI;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}